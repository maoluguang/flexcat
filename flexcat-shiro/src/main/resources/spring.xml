<?xml version="1.0" encoding="UTF-8"?>
<!-- http://stackoverflow.com/questions/9016122/contextloaderlistener-or-not
	http://www.oschina.net/question/96254_140295
 -->
<!-- 整个配置文件的根节点，包含一个或多个bean元素
	 xmlns : XML Namespace
	 xmlns:?? : 表示使用??作为前缀的元素的Namesapce 
	 	通常情况下，namespace对应的URI是一个存放XSD的地址，尽管规范没有这么要求。
	 	如果没有提供schemaLocation，那么Spring的XML解析器会从namespace的URI里加载XSD文件。
	 	spring在加载xsd文件时总是先试图在本地查找xsd文件(spring的jar包中已经包含了所有版本的xsd文件)，
	 	如果没有找到，才会转向去URL指定的路径下载。
	 "http://www.w3.org/2001/XMLSchema-instance" : 
	 	这个namespace里的schemaLocation属性，定义了XML Namespace和对应的 XSD（Xml Schema Definition）文档的位置的关系。
	 	它的值由一个或多个URI引用对组成，两个URI之间以空白符分隔（空格和换行均可）。
	 	第一个URI是定义的 XML Namespace的值，
	 	第二个URI给出Schema文档的位置，Schema处理器将从这个位置读取Schema文档。
	 "http://www.springframework.org/schema/context" : 用于自动扫描和注解注入，如@Controller,@Service等
	 "http://www.springframework.org/schema/aop" : 
	 	
 -->
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.1.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd"
>
	
	<!-- 开启注解 
		向 Spring 容器注册
		AutowiredAnnotationBeanPostProcessor	@Autowired
		CommonAnnotationBeanPostProcessor	@Resource 、@PostConstruct、@PreDestroy 等
		PersistenceAnnotationBeanPostProcessor	@PersistenceContext
		RequiredAnnotationBeanPostProcessor		@Required
		这 4 个BeanPostProcessor。注册这4个 BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。
	-->
	<context:annotation-config />
	
	<!-- 开启组件自动扫描,这个包含了<context:annotation-config />的功能，所以可以删除<context:annotation-config />
		可以有两个节点<context:include-filter>指定要扫描的类
		和<context:exclude-filter>指定要排除扫描的类
		filter标签的type和表达式说明如下：
Filter 		Type						Examples Expression	Description
annotation	org.example.SomeAnnotation	符合SomeAnnoation的target class
assignable	org.example.SomeClass		指定class或interface的全名
aspectj		org.example..*Service+		AspectJ語法
regex		org\.example\.Default.*		Regelar Expression
custom		org.example.MyTypeFilter	Spring3新增自定Type，实现org.springframework.core.type.TypeFilter
	 -->
	<context:component-scan base-package="com.mywebs">
		<!-- 排除扫描@Controller，交给springMVC配置文件扫描 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- Spring的框架中，PropertyPlaceholderConfigurer类可以将.properties(key/value形式)文件中 
		一些动态设定的值(value)，在XML中替换为占位该键($key$)的值， -->
	<bean id="propertyConfigurer" 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<!-- 不设置多个值可以去掉<list> -->
			<list>
                 <value>classpath:dbconfig.properties</value>  
            </list>
        </property>
        <!-- 可注入中文 -->
        <property name="fileEncoding" value="UTF-8"/>  
	</bean>
	
	<!-- 设置数据库连接池，一般都用阿里的druid？https://github.com/alibaba/druid/wiki/配置_DruidDataSource参考配置 -->
	<!-- init-method和destory-method分别指在bean初始化之后要执行的初始化方法，以及在bean销毁时执行的方法。 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<!-- 数据源驱动类可不写，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName -->
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url">
<!-- http://dev.mysql.com/doc/connectors/en/connector-j-reference-configuration-properties.html
				useUnicode=true&characterEncoding=utf8 : 
Should the driver use Unicode character encodings when handling strings? Should only be used when the 
driver can't determine the character set mapping, or you are trying to 'force' the driver to use a 
character set that MySQL either doesn't natively support (such as UTF-8), true/false, 
defaults to 'true'.
If 'useUnicode' is set to true, what character encoding should the driver use when dealing with 
strings? (defaults is to 'autodetect')
				zeroDateTimeBehavior=convertToNull : 
(Datetimes with all-zero components (0000-00-00 ...) — These values can not be represented reliably 
in Java. Connector/J 3.0.x always converted them to NULL when being read from a ResultSet.
Connector/J 3.1 throws an exception by default when these values are encountered as this is the 
most correct behavior according to the JDBC and SQL standards. This behavior can be modified using 
the zeroDateTimeBehavior configuration property. The allowable values are:
	exception (the default), which throws an SQLException with an SQLState of S1009.
	convertToNull, which returns NULL instead of the date.(返回NULL，而不是日期。)
	round, which rounds the date to the nearest closest value which is 0001-01-01.)
				allowMultiQueries=true : (允许用;分隔多个查询在一条语句里)
Allow the use of ';' to delimit multiple queries during one statement (true/false), and does 
not affect the addBatch() and executeBatch() methods, which instead rely on rewriteBatchStatements,
defaults to 'false'.
				transformedBitIsBoolean=true : 
If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for 
future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? Default: false
			-->
			<value>
				<![CDATA[jdbc:mysql://${host}:${port}/${database}?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&transformedBitIsBoolean=true]]>
			</value>
		</property>
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		
		<!-- 配置初始化连接数量、最小空闲连接数、最大并发连接数 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />
		
		<!-- 配置获取连接等待超时的时间，单位是毫秒 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- 验证连接池中的链接是否有效，防止数据库认为连接已死而web服务器认为连接有效 -->
		<property name="validationQuery" value="SELECT 'x'" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于
			timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。Default: false -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。Default: true -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。Default: false -->
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小。如果用Oracle，则把poolPreparedStatements配置为true，
			mysql可以配置为false。分库分表较多的数据库，建议配置为false。缓存PreparedStatement，本质上就是缓存游标，
			启用了PoolPreparedStatements，一定注意设置MaxOpenPreparedStatements小于Oracle Open_Cursor的数值。
			会有内存占用过大问题！！
			http://blog.itpub.net/29254281/viewspace-1064007/
		-->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 配置监控统计拦截的filters，属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
			监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
		<property name="filters" value="stat" />
	</bean>
	
	<!--JDBC事务管理器 -->
	<bean name="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource"/>
 	</bean>
 	
 	<!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize" value="10485760" />
	</bean>
	
</beans>